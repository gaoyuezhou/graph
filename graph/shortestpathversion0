package graph;

/* See restrictions in Graph.java. */

import java.util.*;

/** The shortest paths through an edge-weighted graph.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to represent the weighting
 *  and the search results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author
 */
public abstract class ShortestPaths {

    double[] distances;
    int[] marked;
    int[] parent;
    ArrayList<Integer> path;

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        distances = new double[G.maxVertex()+1];
        marked = new int[G.maxVertex()+1];
        parent = new int[G.maxVertex()+1];
        for(int i: G.vertices()){
            distances[i] = Double.POSITIVE_INFINITY;
        }
        distances[source] = 0;

        // FIXME
    }


    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
        // FIXME
        //QUESTION & CAUTION: use weight of v or estimated distance of v?? currently get weight
        Comparator<Integer> totalCompare = (Integer v1, Integer v2) ->
                (int)(getWeight(v1) + distances[v1] - getWeight(v2) - distances[v2]);
        TreeSet<Integer> queue = new TreeSet<>(totalCompare);
        queue.add(_source);

        while(!queue.isEmpty()){
            int current = queue.pollFirst();
            marked[current] = 1;

            if(current == _dest){
                break;
            }

            for(int i: _G.successors(current)) {
                if(parent[i] == 0 || getWeight(current, i)
                        + distances[current]< distances[i]){
                    parent[i] = current;
                    distances[i] = distances[current] + getWeight(current, i);
                }
                if (marked[i] == 0) {
                    queue.add(i);
                }
            }
        }

        path = new ArrayList<>();
        int v = _dest;
        while(v != _source){
            path.add(0, v);
            v = parent[v];
        }
        path.add(0, v);

    }

    /** Returns the starting vertex. */
    public int getSource() {
        // FIXME
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        // FIXME
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }

    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        // FIXME
        if(_dest != v){
            //CAUTION: should throw an error
        }
        return path;
    }

    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }

    // FIXME

    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;
    // FIXME

}
